<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import '@/baseApI.js'


export default class extends wepy.app {
  config = {
    pages: [
      'pages/tabs/home',
      'pages/tabs/cates',
      'pages/tabs/search',
      'pages/tabs/cart',
      'pages/tabs/me',
      'pages/goods_detail/main',
      'pages/goods_list'
    ],
    window: {
      backgroundTextStyle: 'dark',
      navigationBarBackgroundColor: '#d81e06',
      navigationBarTitleText: '优优',
      navigationBarTextStyle: 'white'
    },
    tabBar:{
      // 选中文本颜色
      selectedColor:'#d81e06',
      // tabBar数组
      list:[{
        pagePath:'pages/tabs/home',
        text:'首页',
        iconPath:'/assets/icons/home.png',
        selectedIconPath:'/assets/icons/home-active.png'
      },{
        pagePath:'pages/tabs/cates',
        text:'分类',
        iconPath:'/assets/icons/cates.png',
        selectedIconPath:'/assets/icons/cates-active.png'
      },{
        pagePath:'pages/tabs/search',
        text:'搜索',
        iconPath:'/assets/icons/search.png',
        selectedIconPath:'/assets/icons/search-active.png'
      },{
        pagePath:'pages/tabs/cart',
        text:'购物车',
        iconPath:'/assets/icons/cart.png',
        selectedIconPath:'/assets/icons/cart-active.png'
      },{
        pagePath:'pages/tabs/me',
        text:'我的',
        iconPath:'/assets/icons/my.png',
        selectedIconPath:'/assets/icons/my-active.png'
      }]
    },
    usingComponents:{
       "van-badge": "/dist/assets/vant/badge/index",
      "van-badge-group": "/dist/assets/vant/badge-group/index",
      "van-button": "/dist/assets/vant/button/index"
    }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  onLaunch() {
    this.testAsync()
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
